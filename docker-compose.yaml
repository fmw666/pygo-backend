# install mysql & redis & consul
version: '3.5'

networks:
  backend:
    driver: bridge
  rmq:
    name: rmq
    driver: bridge
  kong:
    name: kong
    driver: bridge


services:

  mysql:
    image: mysql:8.0.19
    container_name: mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_AUTH_PLUGIN: mysql_native_password
    ports:
      - ${MYSQL_PORT}:3306
    volumes:
      - ./dockerfiles/data/mysql:/var/lib/mysql
  
  redis:
    image: redis:6.0.9
    container_name: redis
    restart: always
    volumes:
      - ./dockerfiles/data/redis:/data
    ports:
      - ${REDIS_PORT}:6379
    networks:
      - backend

  consul:
    image: consul:1.8.4
    container_name: consul
    environment:
      - TZ=Asia/Shanghai
      - ALLOW_NONE_AUTHENTICATION=yes
      - CONSUL_ADVERTISE_CLIENT_URLS=http://consul:${CONSUL_PORT}
    ports:
      - ${CONSUL_PORT}:8500
      - 8600:8600/udp
    command: "agent -server -ui -bootstrap-expect=1 -client=0.0.0.0"
    networks:
      - backend
    restart: always
  
  # docker run --name nacos-standalone -e MODE=standalone -e JVM_XMS=512m -e JVM_XMX=512m -e JVM_XMN=256m -p 8848:8848 -d nacos/nacos-server:latest
  nacos:
    image: nacos/nacos-server:latest
    container_name: nacos
    restart: always
    ports:
      - ${NACOS_PORT}:8848
    environment:
      - PREFER_HOST_MODE=hostname
      - MODE=standalone
      # - SPRING_DATASOURCE_PLATFORM=mysql
      # - MYSQL_SERVICE_HOST=mysql
      # - MYSQL_SERVICE_DB_NAME=test
      # - MYSQL_SERVICE_PORT=3306
      # - MYSQL_SERVICE_USER=test
      # - MYSQL_SERVICE_PASSWORD=123456
      - JVM_XMS=512m
      - JVM_XMX=512m
      - JVM_XMN=256m
    networks:
      - backend
  
  # docker run --rm --name jaeger -p6831:6831/udp -p16686:16686 jaegertracing/all-in-one:latest
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: jaeger
    restart: always
    ports:
      - ${JAEGER_PORT}:6831/udp
      - 16686:16686
    networks:
      - backend
  
  # rocketmq
  rmqnamesrv:
    image: foxiswho/rocketmq:server
    container_name: rmqnamesrv
    ports:
      - ${ROCKETMQ_PORT}:9876
    volumes:
      - ./dockerfiles/logs:/opt/logs
      - ./dockerfiles/store:/opt/store
    networks:
        rmq:
          aliases:
            - rmqnamesrv

  rmqbroker:
    image: foxiswho/rocketmq:broker
    container_name: rmqbroker
    ports:
      - 10909:10909
      - 10911:10911
    volumes:
      - ./dockerfiles/logs:/opt/logs
      - ./dockerfiles/store:/opt/store
      - ./dockerfiles/conf/broker.conf:/etc/rocketmq/broker.conf
    environment:
        NAMESRV_ADDR: "rmqnamesrv:9876"
        JAVA_OPTS: " -Duser.home=/opt"
        JAVA_OPT_EXT: "-server -Xms128m -Xmx128m -Xmn128m"
    command: mqbroker -c /etc/rocketmq/broker.conf
    depends_on:
      - rmqnamesrv
    networks:
      rmq:
        aliases:
          - rmqbroker

  rmqconsole:
    image: styletang/rocketmq-console-ng
    container_name: rmqconsole
    ports:
      - ${ROCKETMQ_CONSOLE_PORT}:8080
    environment:
        JAVA_OPTS: "-Drocketmq.namesrv.addr=rmqnamesrv:9876 -Dcom.rocketmq.sendMessageWithVIPChannel=false"
    depends_on:
      - rmqnamesrv
    networks:
      rmq:
        aliases:
          - rmqconsole
    
  # docker run -d --name kong-database -p 5432:5432 -e "POSTGRES_USER=kong" -e "POSTGRES_DB=kong" -e "POSTGRES_PASSWORD=kong" postgres:12
  kong-database:
    image: postgres:9.6
    container_name: kong-database
    restart: always
    ports:
      - 5432:5432
    environment:
      - POSTGRES_USER=kong
      - POSTGRES_DB=kong
      - POSTGRES_PASSWORD=kong
    volumes:
      - ./dockerfiles/data/postgresql:/var/lib/postgresql/data
    networks:
      - kong
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "kong"]
      interval: 5s
      timeout: 5s
      retries: 5
  
  kong-migration:
    image: kong:latest
    restart: on-failure
    command: "kong migrations bootstrap"
    environment:
      - KONG_DATABASE=postgres
      - KONG_PG_HOST=kong-database
      - KONG_PG_DATABASE=kong
      - KONG_PG_PASSWORD=kong
    links:
      - kong-database
    depends_on:
      - kong-database
    networks:
      - kong
  
  kong:
    image: kong:latest
    restart: always
    environment:
      - KONG_DATABASE=postgres
      - KONG_PG_HOST=kong-database
      - KONG_PG_PASSWORD=kong
      - KONG_ADMIN_LISTEN=0.0.0.0:8001
      - KONG_PROXY_LISTEN=0.0.0.0:8000
      - KONG_PROXY_LISTEN_SSL=0.0.0.0:8443
      # - KONG_DNS_RESOLVER=192.168.1.2:8600
    volumes:
      - ./dockerfiles/conf/kong.conf:/etc/kong/kong.conf
    depends_on:
      - kong-migration
    links:
      - kong-database
    ports:
      - 8000:8000
      - 8001:8001
      - 8443:8443
    healthcheck:
      test: ["CMD", "curl", "-f", "http:/kong:8001"]
      interval: 5s
      timeout: 2s
      retries: 15
    networks:
      - kong
  
  konga-prepare:
    image: pantsel/konga:latest
    restart: on-failure
    command: "-c prepare -a postgres -u postgresql://kong:kong@kong-database:5432/konga"
    environment:
      - KONG_DATABASE=postgres
      - KONG_PG_HOST=kong-database
      - KONG_PG_DATABASE=konga
      - KONG_PG_PASSWORD=kong
    links:
      - kong-database
    depends_on:
      - kong-database
    networks:
      - kong
  
  konga:
    image: pantsel/konga:latest
    restart: always
    environment:
      - DB_ADAPTER=postgres
      - DB_URI=postgresql://kong:kong@kong-database:5432/konga
      - NODE_ENV=production
    depends_on:
      - kong
      - konga-prepare
    links:
      - kong-database
    ports:
      - 1337:1337
    networks:
      - kong
  
  # jenkins
  jenkins:
    image: jenkins/jenkins:lts
    container_name: jenkins
    environment:
      - JAVA_OPTS=-Duser.timezone=Asia/Shanghai
      - TZ=Asia/Shanghai
    volumes:
      - ./dockerfiles/data/jenkins/:/var/jenkins_home
      - ./dockerfiles/logs/jenkins/:/var/log/jenkins
    ports:
      - ${JENKINS_PORT}:8080
      - 50000:50000
    networks:
      - backend
    restart: always
    user: root
